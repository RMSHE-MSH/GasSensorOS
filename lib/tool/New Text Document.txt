# 简单示例 - Simple example

## 1. 如何实例化类? - How to instantiate a class?

```c++
#include <tree.hpp>
#include <string>

// 实例化一颗树, 创建树的根节点. 
// Instantiate a tree, create the root node of the tree.
Tree<std::string> tree("ROOT");
```

在上面的示例中, 我们实例化了一个数据类型为`std::string`名为`tree`的树容器, 并且将根节点的值设置为`"root"`.

### 备注:

- `std::string`可以是C++STL中的任意数据类型.
- `tree`是我们实例化的树的名称.
- `“ROOT”`是树根节点的值(数据类型是`std::string`).



*In the above example, we instantiate a tree container of data type `std::string` named `tree` and set the content of the root node to `"ROOT"`.*

### *note:*

- *`std::string` can be any data type in C++STL.*
- *`tree` is the name of the tree we instantiate*.
- *`"ROOT"` is the value of the root node of the tree (data type is `std::string`).*

## 2.  如何添加子节点? - How to add child nodes?


在实例化树容器后我们就可以向它添加节点. 添加节点的方式有多种, 但是均离不开两个参数, 一是指向父节点的指针`parent_node_ptr`, 二是待添加节点的值`data`. 具体的实现有两种:



*After instantiating the tree container, we can add nodes to it. There are various ways to add a node, but they all depend on two parameters, a pointer to the parent node `parent_node_ptr`, and the value of the node to be added `data`. There are two specific implementations:*

### 1. class TreeNode

```c++
TreeNode<T>* parent_node_ptr->TreeNode<T>* addChild(const T& data);
```

当调用 `addChild()` 函数时，它将创建一个新的 `TreeNode` 对象，该对象保存传递给函数的数据，并将指向新创建节点的指针添加到当前节点的 `children` 向量中。也就是说`addChild()` 做的工作是向当前节点添加一个子节点, 而指定父节点的任务由 `parent_node_ptr` 完成.



*When the `addChild()` function is called, it creates a new `TreeNode` object, which holds the data passed to the function and adds a pointer to the newly created node to the `children` vector of the current node. This means that what `addChild()` does is add a child node to the current node, while the task of specifying the parent node is done by `parent_node_ptr`.*

#### 示例代码 - Sample Code

```C++
#include <tree.hpp>
#include <string>

void setup() {
	Tree<std::string> tree("ROOT");
    /**
    * 向根节点添加一个子节点, 子节点的值为"node_1".
    */
    tree.root->addChild("node_1");
}
```



### 2. class Tree

```c++
TreeNode<T>* addNode(TreeNode<T>* node_ptr, const T& data);
```